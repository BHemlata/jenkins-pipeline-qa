#!groovy
//Jenkinsfile (Declarative Pipeline)

// -- Directory where the Platform Tools is located
def PLATFORM_TOOL_DIRECTORY
// -- Directory where the Android Emulator is located
def EMULATOR_DIRECTORY
// -- Emulator Version.
def EMULATOR_VERSION
// -- Suite Name
def SUITE_NAME

// -- Keep only 15 builds
echo 'Discard old build'
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', 
    daysToKeepStr: '', numToKeepStr: "15"))])

pipeline {
    agent any
    stages {

    // ------------------------------------
    // -- STAGE: Initial Configuration
    // ------------------------------------
    stage('Initial Configuration') {
        steps {
            script {
                // -- Set the Temporal Directory for Windows. *TO-DO: *TO-DO: Change if the path is different. 
                JOB_DIRECTORY = "C:/Users/jenkins-android/.jenkins/workspace/"+"${JOB_NAME}"+"/src/test/resources/files"
                // -- Set the Platform Tool Directory. *TO-DO: Change if the path is different. 
                PLATFORM_TOOL_DIRECTORY = "C:/sdk/platform-tools/"
                // -- Set the Emulator Directory. *TO-DO: Change if the path is different. 
                EMULATOR_DIRECTORY = "C:/sdk/emulator/"
                // -- Set the suite name and route parameter
                SUITE_NAME = "src/test/resources/suites/"+"${JOB_APPIUM_SUITE}"+".xml"
            }
            // -- Clean Workspace
            echo 'Clean Workspace'
            cleanWs()
        }
    }
    
    // Parameters needed: JOB_GIT_BRANCH, JOB_GIT_URL
    // --------------------------------
    // -- STAGE: Download GIT Code
    // --------------------------------
    stage('Download GIT Code') {
        steps {
            // -- Download GIT Code 
            echo "Downloading GIT Code from: ${JOB_GIT_URL}. Branch: ${JOB_GIT_BRANCH}"
            checkout([$class: 'GitSCM', branches: [[name: '${JOB_GIT_BRANCH}']], doGenerateSubmoduleConfigurations: false, 
            extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'c72d9254-6a0e-42df-a3fe-a15a3f0b91b9', 
            url: '${JOB_GIT_URL}']]])
        }
    }

    // Parameters needed: PLATFORM_TOOL_DIRECTORY
    // --------------------------------
    // -- STAGE: Execute ADB Server
    // --------------------------------
    stage('Execute ADB Server') {
        steps {
            echo 'Executing ADB Server'
            // -- First, you need to go to the Platform Tool Directory.
            // -- Then run the ADB Server
            sh """
                cd ${PLATFORM_TOOL_DIRECTORY}
                ./adb.exe start-server&
            """
        }
    }

    // Parameters needed: EMULATOR_DIRECTORY, JOB_EMULATOR_VERSION
    // --------------------------------
    // -- STAGE: Launch Android Emulador
    // --------------------------------
    stage('Launch Android Emulador') {
        steps {
            echo 'Starting Emulador'
                // -- First, you need to go to the Emulator Directory.
                // -- Then launch the Emulator
            script {
                try {
                    // -- Note: It's mandatory to wait several seconds (60s is recommended) until the emulador is ready
                    sh """
                        cd ${EMULATOR_DIRECTORY}
                        ./emulator.exe -avd emulator_${JOB_EMULATOR_VERSION} -engine auto&
                        sleep 60s
                    """
                } catch (err) { 
                    echo "ERROR: The emulator is not open"                                          
                }
            }      
        }
    }

    // --------------------------------
    // -- STAGE: Run Appium Test
    // --------------------------------
    stage('Run Appium Test') {
        steps {
            echo 'Launching all the Appium Tests'
            script {
                try {

                    sh """
                        mvn clean -DdeviceName="emulator_${JOB_EMULATOR_VERSION}" -DdevicePlatformName="${JOB_PLATFORM_NAME}" -DdevicePlatformVersion="${JOB_EMULATOR_PLATFORM_VERSION}" -DdeviceApp="${JOB_APK_NAME}" -DtestSuite="${SUITE_NAME}" test
                    """
                    echo 'Publishing Junit Results'
                    junit '**/target/surefire-reports/junitreports/*.xml'

                } catch (err) { 

                    echo 'Archiving Screenshot of the Failed Tests'
                    archiveArtifacts "**/screenshot/*.png"
                    echo 'Publishing Junit Results'
                    junit '**/target/surefire-reports/junitreports/*.xml'  

                }
            }      

        }
    }

    //------------------------------------
    // -- STAGE: SonarQube
    // ------------------------------------
    stage('SonarQube') {
        steps {
            echo 'Analizing the project with SonarQube:'
            withSonarQubeEnv('Sonar Server') {
            sh "mvn sonar:sonar"
            }
        }
    }

    } // -- End stage
    // ----------------------------------------------
    // -- STAGE: Post Build actions
    // ----------------------------------------------
    post ('Post-Build Actions'){
        success ('JOB SUCCESS'){
            sh 'echo Success Job'  
            slackSend botUser: true, color: "#14910c", channel: "#"+"${JOB_SLACK_CHANNEL_NOTIFICATION}", message: "The Pipeline: `${JOB_NAME}`, `${BUILD_NUMBER}` finished successfully (<${BUILD_URL}|Open>)."
        }

        failure ('JOB FAILURE'){
            sh 'echo Failure Job'
            slackSend botUser: true, color: "#d6280d", channel: "#"+"${JOB_SLACK_CHANNEL_NOTIFICATION}", message: "The Pipeline: `${JOB_NAME}`, `${BUILD_NUMBER}` finished with a failure (<${BUILD_URL}|Open>)"        
        }

        unstable ('JOB UNSTABLE') {
            sh 'echo Unstable Job'
            slackSend botUser: true, color: "#fded72", channel: "#"+"${JOB_SLACK_CHANNEL_NOTIFICATION}", message: "The Pipeline: `${JOB_NAME}`, `${BUILD_NUMBER}` finished unstable (<${BUILD_URL}|Open>)" 
        }

        aborted ('JOB ABORTED') {
            sh 'echo Aborted Job'
            slackSend botUser: true, color: "#bacd19", channel: "#"+"${JOB_SLACK_CHANNEL_NOTIFICATION}", message: "The Pipeline: `${JOB_NAME}`, `${BUILD_NUMBER}` was aborted (<${BUILD_URL}|Open>)"
        }
    }
  }